AWSTemplateFormatVersion: 2010-09-09
Description: Stack for launching Flghts App

Parameters:
  dockerImage:
    Type: String
  dockerPortMapping:
    Type: String
  time:
    Type: String
  version:
    Type: String

Resources:

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      Name: flights-load-balancer
      SecurityGroups:
        - sg-01b1f8744c5a8b453
      Subnets:
        - subnet-08f24cd4fa653f784
        - subnet-08a67d21d4dc38d8a
      Tags:
        - Key: env
          Value: dev

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: '|Ref|WebAppTargetGroup'
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: '80'
      Protocol: HTTP

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: '8080'
      Protocol: 'HTTP'
      VpcId: vpc-0b22f2c3b58b5f60a
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /actuator/health
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Tags:
        - Key: env
          Value: dev

  DeployAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        ImageId: ami-0ff5b3fcd50757b87
        InstanceType: t2.micro
        IamInstanceProfile: ec2-web-app-role
        KeyName: flights-access
        SecurityGroups:
          - sg-0b75d6fdb83a9a55b
        UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash
            TIMESTAMP="${time}"
            IMAGE="${dockerImage}"
            VER="${version}"
            PORTS="${dockerPortMapping}"
            /run_container.sh $IMAGE $VER $PORTS

  DeployAppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - subnet-0844e8ddb642e360f
        - subnet-0f8f952fa7298e790
      DesiredCapacity: 2
      LaunchConfigurationName: '|Ref|DeployAppLaunchConfig'
      TargetGroupARNs:
        - '|Ref|WebAppTargetGroup'
      MaxSize: 2
      MinSize: 2
      Tags:
        - Key: env
          Value: dev
          PropagateAtLaunch: True

  NatA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: '|GetAtt|EipA|AllocationId'
      SubnetId: subnet-08f24cd4fa653f784

  NatB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: '|GetAtt|EipB|AllocationId'
      SubnetId: subnet-08a67d21d4dc38d8a

  EipA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EipB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  RouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: vpc-0b22f2c3b58b5f60a

  RouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: vpc-0b22f2c3b58b5f60a

  SubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: subnet-0844e8ddb642e360f
      RouteTableId: '|Ref|RouteTableA'

  SubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: subnet-0f8f952fa7298e790
      RouteTableId: '|Ref|RouteTableB'

  RouteToNatA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: '|Ref|RouteTableA'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: '|Ref|NatA'

  RouteToNatB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: '|Ref|RouteTableB'
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: '|Ref|NatB'


Outputs:
  ProjectFlights:
    Description: Web App ALB DNS Name
    Value:
      Fn::Join:
        - ''
        - - "http://"
          - '|GetAtt|LoadBalancer|DNSName'